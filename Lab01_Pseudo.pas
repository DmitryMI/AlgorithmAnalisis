
функция ЛевенштейнаРекурсивно(i, j); возвращает целое
начало
	если i равно 0 и j равно 0 то
		вернуть 0
	конец если
	
	если только i или только j равны нулю то
		вернуть отличное от нуля
	конец если
	
	вставка = ЛевенштейнаРекурсивно(i, j - 1) + 1
	удаление = ЛевенштейнаРекурсивно(i - 1, j) + 1
	М = ЛевенштейнаРекурсивно(i -1, j - 1) + 
		Совпадает(строка1[i - 1], строка2[j - 1])
	
	вернуть наименьшее из (вставка, удаление, M)
конец


функция ДамерауЛевенштейнаИтеративно; возвращает целое
начало
	для i от 0 до длины строки 1; шаг = 1
		для j от 0 до длины строки 2; шаг = 1
		
			если i равно 0 и j равно 0 то
				матрица[i,j] = 0	
	
			иначе если только i или только j равны нулю то
				матрица[i,j] = отличное от нуля (i, j)			
			
			иначе если i > 1 и j > 1 и 
				строка1[i - 1] равно строка2[j - 2] и
				строка1[i - 2] равно строка2[j - 1]
			
				если строка1[i - 1] равно строка2[j - 1] то
					разница = 0
				иначе
					разница = 1
				конец если
				
				вставка = Матрица[i - 1, j] + 1
				удаление = Матрица[i, j - 1] + 1
				М = Матрица[i - 1, j - 1] + разница
				перемещение = Матрица[i - 2, j - 2] + 1				
				
				Матрица[i, j] = наименьшее из (вставка, удаление, М, перемещение)
			
			иначе
				если строка1[i - 1] равно строка2[j - 1] то
					разница = 0
				иначе
					разница = 1
				конец если
				
				вставка = Матрица[i - 1, j] + 1
				удаление = Матрица[i, j - 1] + 1
				М = Матрица[i - 1, j - 1] + разница								
				
				Матрица[i, j] = наименьшее из (вставка, удаление, М)
				
			конец
		конец
	конец
конец
			